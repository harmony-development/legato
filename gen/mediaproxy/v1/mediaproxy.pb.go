// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: mediaproxy/v1/mediaproxy.proto

package mediaproxyv1

import (
	_ "github.com/harmony-development/legato/gen/harmonytypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Object representing the metadata of a website.
type SiteMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title of the website.
	SiteTitle string `protobuf:"bytes,1,opt,name=site_title,json=siteTitle,proto3" json:"site_title,omitempty"`
	// Page title of the website page.
	PageTitle string `protobuf:"bytes,2,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
	// Kind of the website.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// Description of the website page.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// URL of the website.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// A thumbnail image for the website.
	Thumbnail []*SiteMetadata_ThumbnailImage `protobuf:"bytes,6,rep,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *SiteMetadata) Reset() {
	*x = SiteMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteMetadata) ProtoMessage() {}

func (x *SiteMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteMetadata.ProtoReflect.Descriptor instead.
func (*SiteMetadata) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{0}
}

func (x *SiteMetadata) GetSiteTitle() string {
	if x != nil {
		return x.SiteTitle
	}
	return ""
}

func (x *SiteMetadata) GetPageTitle() string {
	if x != nil {
		return x.PageTitle
	}
	return ""
}

func (x *SiteMetadata) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SiteMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SiteMetadata) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SiteMetadata) GetThumbnail() []*SiteMetadata_ThumbnailImage {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

// Object represeting the metadata of a media.
type MediaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mimetype of the media.
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	// Filename of the media.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// File ID of the media.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// SÄ±ze of the media.
	//
	// This should (usually) be the size taken from the `Content-Length` header
	// (for HTTP requests).
	// If this is not included, then it means the size could not be determined.
	Size *uint32 `protobuf:"varint,4,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// Extra information specific to types of media.
	//
	// Types that are assignable to Info:
	//	*MediaMetadata_Image
	Info isMediaMetadata_Info `protobuf_oneof:"info"`
}

func (x *MediaMetadata) Reset() {
	*x = MediaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMetadata) ProtoMessage() {}

func (x *MediaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMetadata.ProtoReflect.Descriptor instead.
func (*MediaMetadata) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{1}
}

func (x *MediaMetadata) GetMimetype() string {
	if x != nil {
		return x.Mimetype
	}
	return ""
}

func (x *MediaMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MediaMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MediaMetadata) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (m *MediaMetadata) GetInfo() isMediaMetadata_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *MediaMetadata) GetImage() *MediaMetadata_ImageInfo {
	if x, ok := x.GetInfo().(*MediaMetadata_Image); ok {
		return x.Image
	}
	return nil
}

type isMediaMetadata_Info interface {
	isMediaMetadata_Info()
}

type MediaMetadata_Image struct {
	// Information for an image media.
	Image *MediaMetadata_ImageInfo `protobuf:"bytes,5,opt,name=image,proto3,oneof"`
}

func (*MediaMetadata_Image) isMediaMetadata_Info() {}

// Used in the `FetchLinkMetadata` endpoint.
type FetchLinkMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL to fetch metadata from.
	Url []string `protobuf:"bytes,1,rep,name=url,proto3" json:"url,omitempty"`
}

func (x *FetchLinkMetadataRequest) Reset() {
	*x = FetchLinkMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLinkMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLinkMetadataRequest) ProtoMessage() {}

func (x *FetchLinkMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLinkMetadataRequest.ProtoReflect.Descriptor instead.
func (*FetchLinkMetadataRequest) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{2}
}

func (x *FetchLinkMetadataRequest) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

// Used in the `FetchLinkMetadata` endpoint.
type FetchLinkMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fetched metadata for the requested URL(s).
	Metadata map[string]*FetchLinkMetadataResponse_Metadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// URL(s) that errored out while trying to fetch metadata for them.
	Errors map[string]*FetchLinkMetadataResponse_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchLinkMetadataResponse) Reset() {
	*x = FetchLinkMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLinkMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLinkMetadataResponse) ProtoMessage() {}

func (x *FetchLinkMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLinkMetadataResponse.ProtoReflect.Descriptor instead.
func (*FetchLinkMetadataResponse) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{3}
}

func (x *FetchLinkMetadataResponse) GetMetadata() map[string]*FetchLinkMetadataResponse_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FetchLinkMetadataResponse) GetErrors() map[string]*FetchLinkMetadataResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Used in the `InstantView` endpoint.
type InstantViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL to get instant view for.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *InstantViewRequest) Reset() {
	*x = InstantViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantViewRequest) ProtoMessage() {}

func (x *InstantViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantViewRequest.ProtoReflect.Descriptor instead.
func (*InstantViewRequest) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{4}
}

func (x *InstantViewRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Used in the `InstantView` endpoint.
type InstantViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Site metadata for the URL.
	Metadata *SiteMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Instant view content.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Whether the instant view is valid.
	IsValid bool `protobuf:"varint,3,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *InstantViewResponse) Reset() {
	*x = InstantViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantViewResponse) ProtoMessage() {}

func (x *InstantViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantViewResponse.ProtoReflect.Descriptor instead.
func (*InstantViewResponse) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{5}
}

func (x *InstantViewResponse) GetMetadata() *SiteMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstantViewResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *InstantViewResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

// Used in the `CanInstantView` endpoint.
type CanInstantViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL(s) to query if server can instant view the website.
	Url []string `protobuf:"bytes,1,rep,name=url,proto3" json:"url,omitempty"`
}

func (x *CanInstantViewRequest) Reset() {
	*x = CanInstantViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanInstantViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanInstantViewRequest) ProtoMessage() {}

func (x *CanInstantViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanInstantViewRequest.ProtoReflect.Descriptor instead.
func (*CanInstantViewRequest) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{6}
}

func (x *CanInstantViewRequest) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

// Used in the `CanInstantView` endpoint.
type CanInstantViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the server generate an instant view for the URL(s) queried.
	CanInstantView map[string]bool `protobuf:"bytes,1,rep,name=can_instant_view,json=canInstantView,proto3" json:"can_instant_view,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CanInstantViewResponse) Reset() {
	*x = CanInstantViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanInstantViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanInstantViewResponse) ProtoMessage() {}

func (x *CanInstantViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanInstantViewResponse.ProtoReflect.Descriptor instead.
func (*CanInstantViewResponse) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{7}
}

func (x *CanInstantViewResponse) GetCanInstantView() map[string]bool {
	if x != nil {
		return x.CanInstantView
	}
	return nil
}

// Information pertaining to a thumbnail image.
type SiteMetadata_ThumbnailImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the thumbnail.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Width of the image, in pixels.
	Width uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// Height of the image, in pixels.
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *SiteMetadata_ThumbnailImage) Reset() {
	*x = SiteMetadata_ThumbnailImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteMetadata_ThumbnailImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteMetadata_ThumbnailImage) ProtoMessage() {}

func (x *SiteMetadata_ThumbnailImage) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteMetadata_ThumbnailImage.ProtoReflect.Descriptor instead.
func (*SiteMetadata_ThumbnailImage) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SiteMetadata_ThumbnailImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SiteMetadata_ThumbnailImage) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SiteMetadata_ThumbnailImage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Information pertaining to an image.
type MediaMetadata_ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Width of the image, in pixels.
	Width uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// Height of the image, in pixels.
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *MediaMetadata_ImageInfo) Reset() {
	*x = MediaMetadata_ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMetadata_ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMetadata_ImageInfo) ProtoMessage() {}

func (x *MediaMetadata_ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMetadata_ImageInfo.ProtoReflect.Descriptor instead.
func (*MediaMetadata_ImageInfo) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MediaMetadata_ImageInfo) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MediaMetadata_ImageInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Fetched metadata for a link.
type FetchLinkMetadataResponse_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data of the metadata.
	//
	// Types that are assignable to Data:
	//	*FetchLinkMetadataResponse_Metadata_IsSite
	//	*FetchLinkMetadataResponse_Metadata_IsMedia
	Data isFetchLinkMetadataResponse_Metadata_Data `protobuf_oneof:"data"`
}

func (x *FetchLinkMetadataResponse_Metadata) Reset() {
	*x = FetchLinkMetadataResponse_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLinkMetadataResponse_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLinkMetadataResponse_Metadata) ProtoMessage() {}

func (x *FetchLinkMetadataResponse_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLinkMetadataResponse_Metadata.ProtoReflect.Descriptor instead.
func (*FetchLinkMetadataResponse_Metadata) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{3, 0}
}

func (m *FetchLinkMetadataResponse_Metadata) GetData() isFetchLinkMetadataResponse_Metadata_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FetchLinkMetadataResponse_Metadata) GetIsSite() *SiteMetadata {
	if x, ok := x.GetData().(*FetchLinkMetadataResponse_Metadata_IsSite); ok {
		return x.IsSite
	}
	return nil
}

func (x *FetchLinkMetadataResponse_Metadata) GetIsMedia() *MediaMetadata {
	if x, ok := x.GetData().(*FetchLinkMetadataResponse_Metadata_IsMedia); ok {
		return x.IsMedia
	}
	return nil
}

type isFetchLinkMetadataResponse_Metadata_Data interface {
	isFetchLinkMetadataResponse_Metadata_Data()
}

type FetchLinkMetadataResponse_Metadata_IsSite struct {
	// Site metadata for the URL.
	IsSite *SiteMetadata `protobuf:"bytes,1,opt,name=is_site,json=isSite,proto3,oneof"`
}

type FetchLinkMetadataResponse_Metadata_IsMedia struct {
	// Media metadata for the URL.
	IsMedia *MediaMetadata `protobuf:"bytes,2,opt,name=is_media,json=isMedia,proto3,oneof"`
}

func (*FetchLinkMetadataResponse_Metadata_IsSite) isFetchLinkMetadataResponse_Metadata_Data() {}

func (*FetchLinkMetadataResponse_Metadata_IsMedia) isFetchLinkMetadataResponse_Metadata_Data() {}

// Error data for a link.
type FetchLinkMetadataResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error status (usually HTTP, eg. `500 Internal Server Error`).
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, if the requested URL's server has provided one.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FetchLinkMetadataResponse_Error) Reset() {
	*x = FetchLinkMetadataResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLinkMetadataResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLinkMetadataResponse_Error) ProtoMessage() {}

func (x *FetchLinkMetadataResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_mediaproxy_v1_mediaproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLinkMetadataResponse_Error.ProtoReflect.Descriptor instead.
func (*FetchLinkMetadataResponse_Error) Descriptor() ([]byte, []int) {
	return file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP(), []int{3, 1}
}

func (x *FetchLinkMetadataResponse_Error) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FetchLinkMetadataResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_mediaproxy_v1_mediaproxy_proto protoreflect.FileDescriptor

var file_mediaproxy_v1_mediaproxy_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x0c, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x51, 0x0a, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x1a,
	0x50, 0x0a, 0x0e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x39, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x2c, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x91, 0x05, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x1a, 0x97, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x77, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x72, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6c, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x63, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x41,
	0x0a, 0x13, 0x43, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0xfb, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x05, 0x9a, 0x44, 0x02, 0x08, 0x01, 0x12, 0x6d, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x05, 0x9a, 0x44, 0x02, 0x08, 0x01, 0x12, 0x76, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x05, 0x9a, 0x44, 0x02, 0x08, 0x01, 0x42,
	0xed, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0f,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x2d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x4d, 0x58, 0xaa, 0x02, 0x16,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a,
	0x3a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediaproxy_v1_mediaproxy_proto_rawDescOnce sync.Once
	file_mediaproxy_v1_mediaproxy_proto_rawDescData = file_mediaproxy_v1_mediaproxy_proto_rawDesc
)

func file_mediaproxy_v1_mediaproxy_proto_rawDescGZIP() []byte {
	file_mediaproxy_v1_mediaproxy_proto_rawDescOnce.Do(func() {
		file_mediaproxy_v1_mediaproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediaproxy_v1_mediaproxy_proto_rawDescData)
	})
	return file_mediaproxy_v1_mediaproxy_proto_rawDescData
}

var file_mediaproxy_v1_mediaproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_mediaproxy_v1_mediaproxy_proto_goTypes = []interface{}{
	(*SiteMetadata)(nil),                       // 0: protocol.mediaproxy.v1.SiteMetadata
	(*MediaMetadata)(nil),                      // 1: protocol.mediaproxy.v1.MediaMetadata
	(*FetchLinkMetadataRequest)(nil),           // 2: protocol.mediaproxy.v1.FetchLinkMetadataRequest
	(*FetchLinkMetadataResponse)(nil),          // 3: protocol.mediaproxy.v1.FetchLinkMetadataResponse
	(*InstantViewRequest)(nil),                 // 4: protocol.mediaproxy.v1.InstantViewRequest
	(*InstantViewResponse)(nil),                // 5: protocol.mediaproxy.v1.InstantViewResponse
	(*CanInstantViewRequest)(nil),              // 6: protocol.mediaproxy.v1.CanInstantViewRequest
	(*CanInstantViewResponse)(nil),             // 7: protocol.mediaproxy.v1.CanInstantViewResponse
	(*SiteMetadata_ThumbnailImage)(nil),        // 8: protocol.mediaproxy.v1.SiteMetadata.ThumbnailImage
	(*MediaMetadata_ImageInfo)(nil),            // 9: protocol.mediaproxy.v1.MediaMetadata.ImageInfo
	(*FetchLinkMetadataResponse_Metadata)(nil), // 10: protocol.mediaproxy.v1.FetchLinkMetadataResponse.Metadata
	(*FetchLinkMetadataResponse_Error)(nil),    // 11: protocol.mediaproxy.v1.FetchLinkMetadataResponse.Error
	nil,                                        // 12: protocol.mediaproxy.v1.FetchLinkMetadataResponse.MetadataEntry
	nil,                                        // 13: protocol.mediaproxy.v1.FetchLinkMetadataResponse.ErrorsEntry
	nil,                                        // 14: protocol.mediaproxy.v1.CanInstantViewResponse.CanInstantViewEntry
}
var file_mediaproxy_v1_mediaproxy_proto_depIdxs = []int32{
	8,  // 0: protocol.mediaproxy.v1.SiteMetadata.thumbnail:type_name -> protocol.mediaproxy.v1.SiteMetadata.ThumbnailImage
	9,  // 1: protocol.mediaproxy.v1.MediaMetadata.image:type_name -> protocol.mediaproxy.v1.MediaMetadata.ImageInfo
	12, // 2: protocol.mediaproxy.v1.FetchLinkMetadataResponse.metadata:type_name -> protocol.mediaproxy.v1.FetchLinkMetadataResponse.MetadataEntry
	13, // 3: protocol.mediaproxy.v1.FetchLinkMetadataResponse.errors:type_name -> protocol.mediaproxy.v1.FetchLinkMetadataResponse.ErrorsEntry
	0,  // 4: protocol.mediaproxy.v1.InstantViewResponse.metadata:type_name -> protocol.mediaproxy.v1.SiteMetadata
	14, // 5: protocol.mediaproxy.v1.CanInstantViewResponse.can_instant_view:type_name -> protocol.mediaproxy.v1.CanInstantViewResponse.CanInstantViewEntry
	0,  // 6: protocol.mediaproxy.v1.FetchLinkMetadataResponse.Metadata.is_site:type_name -> protocol.mediaproxy.v1.SiteMetadata
	1,  // 7: protocol.mediaproxy.v1.FetchLinkMetadataResponse.Metadata.is_media:type_name -> protocol.mediaproxy.v1.MediaMetadata
	10, // 8: protocol.mediaproxy.v1.FetchLinkMetadataResponse.MetadataEntry.value:type_name -> protocol.mediaproxy.v1.FetchLinkMetadataResponse.Metadata
	11, // 9: protocol.mediaproxy.v1.FetchLinkMetadataResponse.ErrorsEntry.value:type_name -> protocol.mediaproxy.v1.FetchLinkMetadataResponse.Error
	2,  // 10: protocol.mediaproxy.v1.MediaProxyService.FetchLinkMetadata:input_type -> protocol.mediaproxy.v1.FetchLinkMetadataRequest
	4,  // 11: protocol.mediaproxy.v1.MediaProxyService.InstantView:input_type -> protocol.mediaproxy.v1.InstantViewRequest
	6,  // 12: protocol.mediaproxy.v1.MediaProxyService.CanInstantView:input_type -> protocol.mediaproxy.v1.CanInstantViewRequest
	3,  // 13: protocol.mediaproxy.v1.MediaProxyService.FetchLinkMetadata:output_type -> protocol.mediaproxy.v1.FetchLinkMetadataResponse
	5,  // 14: protocol.mediaproxy.v1.MediaProxyService.InstantView:output_type -> protocol.mediaproxy.v1.InstantViewResponse
	7,  // 15: protocol.mediaproxy.v1.MediaProxyService.CanInstantView:output_type -> protocol.mediaproxy.v1.CanInstantViewResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_mediaproxy_v1_mediaproxy_proto_init() }
func file_mediaproxy_v1_mediaproxy_proto_init() {
	if File_mediaproxy_v1_mediaproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLinkMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLinkMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanInstantViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanInstantViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteMetadata_ThumbnailImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMetadata_ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLinkMetadataResponse_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaproxy_v1_mediaproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLinkMetadataResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mediaproxy_v1_mediaproxy_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MediaMetadata_Image)(nil),
	}
	file_mediaproxy_v1_mediaproxy_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*FetchLinkMetadataResponse_Metadata_IsSite)(nil),
		(*FetchLinkMetadataResponse_Metadata_IsMedia)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediaproxy_v1_mediaproxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mediaproxy_v1_mediaproxy_proto_goTypes,
		DependencyIndexes: file_mediaproxy_v1_mediaproxy_proto_depIdxs,
		MessageInfos:      file_mediaproxy_v1_mediaproxy_proto_msgTypes,
	}.Build()
	File_mediaproxy_v1_mediaproxy_proto = out.File
	file_mediaproxy_v1_mediaproxy_proto_rawDesc = nil
	file_mediaproxy_v1_mediaproxy_proto_goTypes = nil
	file_mediaproxy_v1_mediaproxy_proto_depIdxs = nil
}
